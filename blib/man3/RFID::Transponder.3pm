.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Transponder 3"
.TH Transponder 3 "2004-04-04" "perl v5.8.1" "User Contributed Perl Documentation"
.SH "NAME"
RFID::Transponder \- Perl module to store card related data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use RFID::Transponder;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.IP "\fB\f(BIdsfid_available()\fB\fR" 4
.IX Item "dsfid_available()"
data storage format identifier is not supported by all transponders.
feature is available, if method returns true.
.IP "\fB\f(BIsize_info_available()\fB\fR" 4
.IX Item "size_info_available()"
information about storage capacity is not supported by all transponders.
feature is available, if method returns true. if information is not
present there might be problems with transponder-memory related functions.
.IP "\fB\f(BIafi_available()\fB\fR" 4
.IX Item "afi_available()"
application family identifier is not supported by all transponders.
feature is available, if method returns true.
.IP "\fB\f(BIic_reference_available()\fB\fR" 4
.IX Item "ic_reference_available()"
ic reference  is not supported by all transponders.
feature is available, if method returns true.
.IP "\fB\f(BIget_card_id_hex()\fB\fR" 4
.IX Item "get_card_id_hex()"
returns the card id as hex string. e.g.: 'E0040100003B346E'.
.IP "\fB\f(BIget_vendor()\fB\fR" 4
.IX Item "get_vendor()"
returns the vendor in a numerical form.
.IP "\fB\f(BIget_vendor_name()\fB\fR" 4
.IX Item "get_vendor_name()"
returns the vendor name as string.
.IP "\fB\f(BIget_afi()\fB\fR" 4
.IX Item "get_afi()"
returns application family identifier in numerical form.
.IP "\fB\f(BIget_afi_descr()\fB\fR" 4
.IX Item "get_afi_descr()"
returns application family identifier in string form.
.IP "\fB\f(BIget_ic_reference()\fB\fR" 4
.IX Item "get_ic_reference()"
returns ic reference as integer.
.IP "\fB\f(BIget_last_block_num()\fB\fR" 4
.IX Item "get_last_block_num()"
returns the maximum block index.
.IP "\fB\f(BIget_block_size()\fB\fR" 4
.IX Item "get_block_size()"
returns size of a block in bytes.
.IP "\fB\f(BIget_dsfid()\fB\fR" 4
.IX Item "get_dsfid()"
returns data storage format identifier as integer.
.IP "\fB\f(BIget_config_byte()\fB\fR" 4
.IX Item "get_config_byte()"
returns current transponder communication flags in a byte:
.Sp
.Vb 29
\&  Bit    Beschreibung
\&    0    Sub-Carrier
\&         0 = AM One Subcarrier (ASK)
\&         1 = FM Two Subcarrier (FSK)
\&    1    Data Rate
\&         0 = Low Data Rate
\&         1 = High Data Rate
\&    2    Select_flag
\&         0 = Befehl soll von jedem Transponder ausgefuhrt werden
\&             bezuglich des Address_flags
\&         1 = Befehl soll nur von dem selektierten Transponder
\&             ausgefuhrt werden. Das Address_flag muss 0 gesetzt
\&             werden und die UID darf nicht im Befehl enthalten
\&             sein.
\&    3    Address_flag
\&         0 = Die Anforderung an den Transponder ist nicht
\&             adressiert.
\&         1 = Die Anforderung an den Transponder ist adressiert.
\&             Die UID muss im Befehl enthalten sein.
\&    4    AFI
\&         0 = AFI wird nicht verwendet
\&         1 = AFI wird verwendet
\&    5    Timeslots
\&         0 = 16 Timeslots
\&         1 = 1 Timeslot
\&    6    Data Encoding
\&         0 = Fast Data Encoding (1/4)
\&         1 = Normal Data Encoding (1/256)
\&    7    Modulation 0=10% Modulation; 1=100% Modulation
.Ve
.IP "\fB\f(BIget_uid()\fB\fR" 4
.IX Item "get_uid()"
returns uid as byte string.
.IP "\fB\f(BIget_memory_read_complete()\fB\fR" 4
.IX Item "get_memory_read_complete()"
returns true if object knows every memory block.
.IP "\fBget_block( <block_num> )\fR" 4
.IX Item "get_block( <block_num> )"
returns string with data.
.IP "\fBget_block_sec_status( <block_num> )\fR" 4
.IX Item "get_block_sec_status( <block_num> )"
return undef (if block sec status is unknown), true or
false. true means block is read only.
.IP "\fB\f(BIget_memory()\fB\fR" 4
.IX Item "get_memory()"
returns complete memory as a string
.SH "SEE ALSO"
.IX Header "SEE ALSO"
man \fBRFID::Reader\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Schobert, <martin@weltregierung.de>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004 by Martin Schobert
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
